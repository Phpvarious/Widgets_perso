{
    "name": "JeeToJmqttSource_publish",
    "isActive": "1",
    "group": "",
    "mode": "schedule",
    "schedule": "*\/10 * * * *",
    "trigger": [
        ""
    ],
    "timeout": "0",
    "object_id": null,
    "isVisible": "0",
    "display": {
        "name": "",
        "icon": ""
    },
    "order": "9999",
    "description": "",
    "configuration": {
        "timeDependency": 0,
        "has_return": 0,
        "logmode": "default",
        "allowMultiInstance": "0",
        "syncmode": "0",
        "timeline::enable": "0",
        "timeline::folder": ""
    },
    "elements": [
        {
            "name": null,
            "type": "code",
            "options": [],
            "order": "0",
            "subElements": [
                {
                    "name": null,
                    "type": "code",
                    "subtype": "action",
                    "options": {
                        "collapse": "0",
                        "enable": "1"
                    },
                    "order": "0",
                    "expressions": [
                        {
                            "type": "code",
                            "subtype": null,
                            "expression": "$send_jmqtt = cmd::byId('88787');\n$detail_message = true;\n$detail_deamon = true;\n\n$messageAll = utils::o2a(message::all()); \/\/ extraction des messages\n$nbMessage = count($messageAll); \/\/ nombre de message\n\/\/$nbMessage = 0;\n$_options['message'] = json_encode($messageAll);\n\n\/* Récupération des updates *\/\n$nbNeedUpdate = update::nbNeedUpdate();\n\n$_options['update'] = array();\n$return = array();\nforeach (update::all() as $update) {\n  $infos = utils::o2a($update);\n  if ($update->getType() == 'plugin') {\n    try {\n      $plugin = plugin::byId($update->getLogicalId());\n      if (is_object($plugin)){\n        $_options['update'][] = array(\n          \"id\" => $plugin->getId(),\n          \"name\" => $plugin->getName(), \n          \"type\" => $update->getType(), \n          \"version\" => $update->getConfiguration(\"version\", \"?\"), \n          \"localVersion\" => $update->getLocalVersion(), \n          \"remoteVersion\" => $update->getRemoteVersion(), \n          \"updateDate\" => ($update->getUpdateDate())?$update->getUpdateDate():\"NC\",\n          \"logicalId\" => $update->getLogicalId(), \n          \"status\" => $update->getStatus(), \n          \"id_update\" => $update->getId(),\n        \"doNotUpdate\" => $update->getConfiguration(\"doNotUpdate\", \"0\"), \n          \"source\" => $update->getSource()\n          \n        );\n        $infos['plugin'] = is_object($plugin) ? utils::o2a($plugin) : array();\n      }\n      \n      \n      \n    } catch (Exception $e) {\n    }\n  }\n  $return[] = $infos;\n  if ($update->getType() == 'core') {\n    \/\/$infos['branch'] = config::byKey('core::branch', 'core', 'Unknown');\n  }\n  \/\/$returnUpdate['update'][] = $infos;\n  \/\/$returnUpdate = json_encode($returnUpdate);\n}\n$_options['update'] = json_encode($_options['update']);\n$return = json_encode($return);\n\/\/$scenario->setLog($return);\n\/\/$nbNeedUpdate = 0;\n\/* Verification de Jeedom *\/\n$statut = jeedom::isOK();\n\/\/$statut = 0;\n\/* Version de Jeedom *\/\n$version = jeedom::version();\n\/* Branch *\/\n$branch = config::byKey('core::branch');\n\/* Nom du jeedom source *\/\n$name = config::byKey('name');\n\/* Check des déamons *\/\n$_options['deamons'] = array();\nforeach (plugin::listPlugin(true) as $plugin) {\n  if ($plugin->getHasOwnDeamon() != 1) {\n    continue;\n  }\n  $_options['deamons'][] = array('id' => $plugin->getId(), 'name' => $plugin->getName(), 'info' => $plugin->deamon_info());\n}\n$_options['deamons'] = json_encode($_options['deamons']);\n\/* lastCommunication *\/\n$_options['lastCommunication'] = array();\n$_options['lastCommunication'][] = array('date' => date(\"d-m-Y\"), 'heure' => date(\"H:i:s\"));\n\n$_options['lastCommunication'] = json_encode($_options['lastCommunication']);\n\n\/* Création du payload *\/\n$_options['payload'] = '{';\n  $_options['payload'] .= '\"Nombre de message\":\"'.$nbMessage.'\",';\n  if ($detail_message) $_options['payload'] .= '\"Message\":'.$_options['message'].',';\n  $_options['payload'] .= '\"Nombre update\":\"'.$nbNeedUpdate.'\",';\n$_options['payload'] .= '\"update\":'.$_options['update'].',';\n  $_options['payload'] .= '\"Statut\":\"'.$statut.'\",';\n  $_options['payload'] .= '\"Version\":\"'.$version.'\",';\n  $_options['payload'] .= '\"Branch\":\"'.$branch.'\",';\n  $_options['payload'] .= '\"Name\":\"'.$name.'\",';\n$_options['payload'] .= '\"lastCommunication\":'.$_options['lastCommunication'].',';\n  if ($detail_deamon) $_options['payload'] .= '\"Deamon\":'.$_options['deamons'].',';\n  \n$_options['payload'] = trim($_options['payload'],',');\n$_options['payload'] .= '}';\n\n\n\n\/* Envoi du payload vers jmqtt *\/\n$request = $send_jmqtt->getConfiguration('request', \"\");\n$topic = $send_jmqtt->getTopic();\n$scenario->setLog('Topic : ' . $send_jmqtt->getEqLogic()->getBrkId());\n$qos = $send_jmqtt->getConfiguration('Qos', 1);\n$retain = $send_jmqtt->getConfiguration('retain', 0);\n$send_jmqtt->getEqLogic()->publish($send_jmqtt->getEqLogic()->getName(), $topic, $_options['payload'], $qos, $retain);\n\/\/exec('mosquitto_pub -h 127.0.0.1 -t Montest -m '.$_options['payload']);\n$scenario->setLog($send_jmqtt->getEqLogic()->getBrkId());",
                            "options": [],
                            "order": "0"
                        }
                    ]
                }
            ]
        }
    ]
}